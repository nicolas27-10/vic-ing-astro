---
import Layout from "../layouts/Layout.astro";
import { db } from "../data/db";

/// <reference types="astro/client" />

const [rows] = await db.query("SELECT * FROM servicios");

const servicios = rows as any[];

---

<Layout title="VIC Seguridad - Administrar Servicios.">

    <main class="min-h-svh mx-auto bg-gradient-to-r from-blue-500 via-blue-300 to-blue-500 items-center flex px-20 pt-32 pb-20 relative">

        <div class="flex flex-col items-center justify-center max-w-5xl w-full mx-auto bg-gray-100 rounded-md shadow p-16">
            <section class="w-full h-fit">
                <h1 class="text-2xl md:text-4xl font-bold mb-4 md:mb-8 text-center">Agregar Servicio</h1>
                
                <form method="POST" action="/api/agregar-servicio" class="space-y-4">
                    <div>
                        <label class="block font-medium">Nombre del Servicio</label>
                        <input name="nombre" required class="w-full border px-3 py-2 rounded" />
                    </div>
                    
                    <div>
                        <label class="block font-medium">Descripción</label>
                        <textarea name="descripcion" required class="w-full border px-3 py-2 rounded"></textarea>
                    </div>
                    
                    <div>
                        <label class="block font-medium">Precio Base</label>
                        <input type="number" name="precio" min="0" required class="w-full border px-3 py-2 rounded" />
                    </div>
            
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">Guardar Servicio</button>
                </form>
            </section>
        
            <section class="mx-auto w-full flex flex-col mt-16 h-fit justify-center items-center">
                {servicios.length === 0 && (
                    <h2 class="text-xl md:text-3xl font-bold mb-3 text-center">Aun no hay servicios disponibles.</h2>
                )}
                {servicios.length > 0 && (
                    <h2 class="text-xl md:text-3xl font-bold mb-3 text-center">Servicios disponibles: {servicios.length}</h2>
                )}
                <ul class="space-y-2 w-full mt-5">
                    {servicios.map((servicio) => {
                        const precioFormateado = new Intl.NumberFormat("es-CL").format(servicio.precioBase);
                        return (
                            <li class="p-6 bg-white border rounded w-full shadow-md">
                                <div class="flex justify-between items-center">
                                    <span class="flex flex-col">
                                        <strong class="text-2xl font-semibold">{servicio.nombre}</strong> 
                                        <small class="text-lg mt-2 mr-8">{servicio.descripcion}</small>
                                    </span>
                                    <div class="text-center">
                                        <span class="font-bold text-2xl">${precioFormateado}</span>
                                        <div class="flex justify-end space-x-2 mt-2">
                                            <button class="bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600 transition" id={servicio.id}>Editar</button>
                                            <button class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 transition" id={servicio.id}>Eliminar</button>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        );
                    })} 
                </ul>
            </section>
        </div>

        <div id="modal" class="hidden absolute inset-0 bg-black bg-opacity-50 items-center justify-center z-50">
            <div class="bg-white p-6 rounded shadow-lg text-center">
                <h1 class="font-semibold text-2xl mb-4">¡Atencion!</h1>
                <p id="modal-message" class="mb-4 text-xl"></p>
                <button id="close-modal" class="bg-blue-600 text-white px-4 py-2 rounded">Cerrar</button>
            </div>
        </div>
    
        <!-- Modal for editing a service -->
        <div id="edit-modal" class="absolute hidden inset-0 bg-black bg-opacity-50 items-center justify-center z-50">
            <div class="bg-white p-6 rounded shadow-lg w-96">
                <h2 class="text-2xl font-bold mb-4 text-center">Editar Servicio</h2>
                <form id="edit-service-form" class="space-y-4">
                    <div>
                        <label class="block font-medium">Nombre del Servicio</label>
                        <input id="edit-nombre" name="nombre" required class="w-full border px-3 py-2 rounded" />
                    </div>
                    <div>
                        <label class="block font-medium">Descripción</label>
                        <textarea id="edit-descripcion" name="descripcion" required class="w-full border px-3 py-2 rounded"></textarea>
                    </div>
                    <div>
                        <label class="block font-medium">Precio Base</label>
                        <input id="edit-precioBase" type="number" name="precioBase" min="0" required class="w-full border px-3 py-2 rounded" />
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" id="cancel-edit" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition">Cancelar</button>
                        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">Guardar Cambios</button>
                    </div>
                </form>
            </div>
        </div>
    </main>


    <script type="application/json" id="servicios-data">
        {JSON.stringify(servicios)}
    </script>

    <script>
        // Asegúrate de que se ejecute solo cuando el DOM esté listo
        window.addEventListener("DOMContentLoaded", () => {
            const raw = document.getElementById("servicios-data")?.textContent;
            if (!raw) return console.error("No se encontró el script con los datos de servicios.");

            try {
            window.servicios = JSON.parse(raw);
            console.log("Servicios cargados en window:", window.servicios);
            } catch (e) {
            console.error("Error al parsear servicios:", e);
            }
        });
    </script>

    <script>
            // Extender la interfaz de Window para incluir editarServicio y servicios
        declare global {
            interface Window {
                editarServicio: (id: string) => void;
                eliminarServicio: (id: string) => void;
                servicios: { id: string; nombre: string; descripcion: string; precioBase: number }[];
            }
        }
    
            // Leer parámetros de la URL
        const params = new URLSearchParams(window.location.search);
        const mensaje = params.get("mensaje");
        const tipo = params.get("tipo");

        const modal = document.getElementById("modal");
        const modalMessage = document.getElementById("modal-message");

        if (mensaje) {
            modalMessage.textContent = mensaje;

            // Cambiar el estilo del modal según el tipo
            if (tipo === "exito") {
                modalMessage.classList.add("text-green-600");
            } else if (tipo === "error") {
                modalMessage.classList.add("text-red-600");
            }

            // Mostrar el modal
            modal.classList.remove("hidden");
            modal.classList.add("flex");

            // Cerrar el modal al hacer clic en el botón
            const closeModal = document.getElementById("close-modal");
            closeModal.addEventListener("click", () => {
                modal.classList.add("hidden");
                modal.classList.remove("flex");
                window.history.replaceState({}, document.title, "/admin"); // Elimina los parámetros de la URL
            });

            // Cerrar el modal al hacer clic fuera de él
            window.addEventListener("click", (event) => {
                if (event.target === modal) {
                    modal.classList.add("hidden");
                    modal.classList.remove("flex");
                    window.history.replaceState({}, document.title, "/admin"); // Elimina los parámetros de la URL
                }
            });
        }

        
        document.addEventListener("DOMContentLoaded", () => {
            // Attach event listeners to "Eliminar" buttons
            const btnEliminarServicio = document.querySelectorAll("button.bg-red-500");
            btnEliminarServicio.forEach((btn) => {
                btn.addEventListener("click", async (event) => {
                    const id = btn.getAttribute("id"); // Retrieve the id attribute
                    if (!id) {
                        alert("No se pudo obtener el ID del servicio.");
                        return;
                    }
                    const confirmar = confirm("¿Estás seguro de que deseas eliminar este servicio?");
                    if (confirmar) {
                        try {
                            const response = await fetch(`/api/eliminar-servicio?id=${encodeURIComponent(id)}`, { method: "DELETE" });
                            if (response.ok) {
                                alert("Servicio eliminado con éxito.");
                                window.location.reload();
                            } else {
                                console.error("Error al eliminar el servicio:", response.statusText);
                                alert("Error al eliminar el servicio.");
                            }
                        } catch (error) {
                            alert("Ocurrió un error al intentar eliminar el servicio.");
                        }
                    }
                });
            });



            
            const btnEditarServicio = document.querySelectorAll("button.bg-yellow-500");
            const editModal = document.getElementById("edit-modal");
            const editForm = document.getElementById("edit-service-form");
            const editNombre = document.getElementById("edit-nombre") as HTMLInputElement;
            const editDescripcion = document.getElementById("edit-descripcion") as HTMLTextAreaElement;
            const editPrecioBase = document.getElementById("edit-precioBase") as HTMLInputElement;
            const cancelEdit = document.getElementById("cancel-edit");

            let currentServiceId: string | null = null;

            btnEditarServicio.forEach((btn) => {
                btn.addEventListener("click", () => {
                    const id = btn.getAttribute("id"); // id del servicio
                    console.log("ID del servicio a editar:", id);

                    if (!id) {
                        alert("No se pudo obtener el ID del servicio.");
                        return;
                    }

                    console.log("Servicios disponibles:", window.servicios); 
                    const servicio = window.servicios.find((s) => s.id.toString() === id);
                    console.log("Servicio encontrado:", servicio);
                    if (!servicio) {
                        alert("No se encontró el servicio.");
                        return;
                    }

                    currentServiceId = id;
                    editNombre.value = servicio.nombre;
                    editDescripcion.value = servicio.descripcion;
                    editPrecioBase.value = servicio.precioBase.toString();

                    editModal.classList.remove("hidden");
                    editModal.classList.add("flex");
                });
            });

            cancelEdit.addEventListener("click", () => {
                editModal.classList.add("hidden");
                editModal.classList.remove("flex");
                currentServiceId = null;
            });

            editForm.addEventListener("submit", async (event) => {
                event.preventDefault();

                if (!currentServiceId) {
                    alert("No hay servicio seleccionado para editar.");
                    return;
                }

                const updatedServicio = {
                    id: currentServiceId,
                    nombre: editNombre.value.trim(),
                    descripcion: editDescripcion.value.trim(),
                    precioBase: parseInt(editPrecioBase.value, 10),
                };

                try {
                    const response = await fetch(`/api/editar-servicio`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(updatedServicio),
                    });

                    if (response.ok) {
                        alert("Servicio actualizado con éxito.");
                        window.location.reload();
                    } else {
                        const msg = await response.text();
                        alert("Error al actualizar el servicio: " + msg);
                    }
                } catch (error) {
                    console.error(error);
                    alert("Ocurrió un error al intentar actualizar el servicio.");
                }
            });
        });
    </script>

</Layout>