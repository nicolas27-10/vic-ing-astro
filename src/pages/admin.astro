---
import Layout from "../layouts/Layout.astro";
import { db } from "../data/db";

/// <reference types="astro/client" />

const [rows] = await db.query("SELECT * FROM servicios");

const servicios = rows as any[];
---

<Layout title="VIC Seguridad - Administrar Servicios.">

    <main class="min-h-svh mx-auto bg-gradient-to-r from-blue-500 via-blue-300 to-blue-500 items-center flex xl:px-20 px-4 pt-32 pb-20 relative">

        <div class="flex flex-col items-center justify-center max-w-5xl w-full mx-auto bg-gray-100 rounded-md shadow xl:p-16 py-14 p-4 relative">
            <section class="w-full h-fit md:relative">

                <form action="/api/logout" method="GET" class="absolute md:right-0 md:top-0 right-4 top-4"> 
                    <button type="submit" class="border border-red-600 text-red-600 hover:bg-red-600 hover:text-white transition md:px-4 md:py-2 px-2 py-1 rounded-md ">
                        Cerrar sesión
                    </button>
                </form>

                <h1 class="text-2xl md:text-4xl font-bold mb-4 md:mb-8 text-center">Agregar Servicio</h1>
                
                <form method="POST" action="/api/agregar-servicio" enctype="multipart/form-data" class="space-y-4">
                    <div>
                        <label class="block font-medium">Nombre del Servicio</label>
                        <input name="nombre" required class="w-full border px-3 py-2 rounded" />
                    </div>
                    
                    <div>
                        <label class="block font-medium">Descripción</label>
                        <textarea name="descripcion" required class="w-full border px-3 py-2 rounded"></textarea>
                    </div>
                    
                    <div>
                        <label class="block font-medium">Precio Base</label>
                        <input type="number" name="precio" min="0" required class="w-full border px-3 py-2 rounded" />
                    </div>

                    <div class="overflow-auto">
                        <label class="block font-medium">Imagen</label>
                        <input id="image-select" type="file" name="imagen" accept="image/*" required class="py-2 rounded" />
                    </div>
                    <div class="mt-2">
                        <img id="img-preview" src="" alt="Vista previa de imagen" class="max-h-40 rounded shadow hidden" />
                    </div>
            
                    <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">Guardar Servicio</button>
                </form>
            </section>
        
            <section class="mx-auto w-full flex flex-col mt-16 h-fit justify-center items-center">
                {servicios.length === 0 && (
                    <h2 class="text-xl md:text-3xl font-bold mb-3 text-center">Aun no hay servicios disponibles.</h2>
                )}
                {servicios.length > 0 && (
                    <h2 class="text-xl md:text-3xl font-bold mb-3 text-center">Servicios disponibles: {servicios.length}</h2>
                )}
                <ul class="space-y-2 w-full mt-5">
                    {servicios.map((servicio) => {
                        const precioFormateado = new Intl.NumberFormat("es-CL").format(servicio.precioBase);
                        return (
                            <li class="p-4 bg-white border rounded w-full shadow-md">
                                <div class="xl:flex xl:flex-row flex-col xl:justify-between items-center">
                                    <div class="flex xl:flex-row flex-col items-center">
                                        {servicio.imagen && (
                                            <img src={servicio.imagen} alt={servicio.nombre} class="md:w-28 md:max-h-60 rounded-md md:mr-4 md:px-0 mx-10" />
                                        )}
                                        <span class="flex flex-col xl:items-start items-center justify-center mt-4 xl:mt-0">
                                            <strong class="text-2xl font-semibold">{servicio.nombre}</strong> 
                                            <small class="text-lg mt-2 xl:mr-8">{servicio.descripcion}</small>
                                        </span>
                                    </div>
                                    <div class="text-center">
                                        <span class="font-bold text-2xl">${precioFormateado}</span>
                                        <div class="flex xl:justify-end justify-center space-x-2 mt-2">
                                            <button class="bg-yellow-500 text-white px-3 py-1 w-24 rounded hover:bg-yellow-600 transition" 
                                            id={servicio.id} 
                                            data-nombre={servicio.nombre} 
                                            data-descripcion={servicio.descripcion}
                                            data-precio={servicio.precioBase}
                                            data-imagen={servicio.imagen}
                                            >
                                                Editar
                                            </button>
                                            <button class="bg-red-500 text-white px-3 py-1 w-24 rounded hover:bg-red-600 transition" 
                                            id={servicio.id}
                                            data-nombre={servicio.nombre} 
                                            data-descripcion={servicio.descripcion}
                                            data-precio={servicio.precioBase}
                                            data-imagen={servicio.imagen}
                                            >
                                                Eliminar
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        );
                    })} 
                </ul>
            </section>
        </div>

        <div id="modal" class="hidden absolute inset-0 bg-black bg-opacity-50 items-center justify-center z-50">
            <div class="bg-white p-6 rounded shadow-lg text-center">
                <h1 class="font-semibold text-2xl mb-4">¡Atencion!</h1>
                <p id="modal-message" class="mb-4 text-xl"></p>
                <button id="close-modal" class="bg-blue-600 text-white px-4 py-2 rounded">Cerrar</button>
            </div>
        </div>
    
        <!-- Modal for editing a service -->
        <div id="edit-modal" class="absolute hidden inset-0 bg-black bg-opacity-50 items-center justify-center z-50">
            <div class="bg-white p-6 rounded shadow-lg text-wrap max-w-[90vw] md: max-w-auto ">
                <h2 class="text-2xl font-bold mb-4 text-center">Editar Servicio</h2>
                <form id="edit-service-form" class="space-y-4" enctype="multipart/form-data">
                    <div>
                        <label class="block font-medium">Nombre del Servicio</label>
                        <input id="edit-nombre" name="nombre" required class="w-full border px-3 py-2 rounded" />
                    </div>

                    <div>
                        <label class="block font-medium">Descripción</label>
                        <textarea id="edit-descripcion" name="descripcion" required class="w-full border px-3 py-2 rounded"></textarea>
                    </div>

                    <div>
                        <label class="block font-medium">Precio Base</label>
                        <input id="edit-precioBase" type="number" name="precioBase" min="0" required class="w-full border px-3 py-2 rounded" />
                    </div>

                    <div>
                        <div class="overflow-auto">
                            <label class="block font-medium">Imagen</label>
                            <input id="edit-imagen" type="file" name="imagen" accept="image/*" class="py-2 rounded" />
                        </div>
                        <div class="mt-2">
                            <img id="edit-preview" src="" alt="Vista previa de imagen" class="max-h-40 rounded shadow hidden" />
                            <input type="hidden" id="edit-imagen-actual" name="imagenActual" />
                        </div>
                    </div>

                    <div class="flex justify-end space-x-2">
                        <button type="button" id="cancel-edit" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition">Cancelar</button>
                        <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition">Guardar Cambios</button>
                    </div>
                </form>
            </div>
        </div>
    </main>


    <script>
            // Extender la interfaz de Window para incluir editarServicio y servicios
        declare global {
            interface Window {
                editarServicio: (id: string) => void;
                eliminarServicio: (id: string) => void;
            }
        }

        
        // Mostrar la vista previa de la imagen cuando el usuario selecciona una imagen en el formulario
        const imgPreview = document.getElementById("img-preview") as HTMLImageElement;
        const imgSelect = document.getElementById("image-select") as HTMLInputElement;

        imgSelect.addEventListener("change", () => {
            const file = imgSelect.files?.[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    imgPreview.src = e.target?.result as string;
                    imgPreview.classList.remove("hidden");
                };
                reader.readAsDataURL(file);
            } else {
                imgPreview.classList.add("hidden");
                imgPreview.src = "";
            }
        });
    
            // Leer parámetros de la URL
        const params = new URLSearchParams(window.location.search);
        const mensaje = params.get("mensaje");
        const tipo = params.get("tipo");

        const modal = document.getElementById("modal");
        const modalMessage = document.getElementById("modal-message");

        if (mensaje) {
            modalMessage.textContent = mensaje;

            // Cambiar el estilo del modal según el tipo
            if (tipo === "exito") {
                modalMessage.classList.add("text-green-600");
            } else if (tipo === "error") {
                modalMessage.classList.add("text-red-600");
            }

            // Mostrar el modal
            modal.classList.remove("hidden");
            modal.classList.add("flex");

            // Cerrar el modal al hacer clic en el botón
            const closeModal = document.getElementById("close-modal");
            closeModal.addEventListener("click", () => {
                modal.classList.add("hidden");
                modal.classList.remove("flex");
                window.history.replaceState({}, document.title, "/admin"); // Elimina los parámetros de la URL
            });

            // Cerrar el modal al hacer clic fuera de él
            window.addEventListener("click", (event) => {
                if (event.target === modal) {
                    modal.classList.add("hidden");
                    modal.classList.remove("flex");
                    window.history.replaceState({}, document.title, "/admin"); // Elimina los parámetros de la URL
                }44
            });
        }

        
        document.addEventListener("DOMContentLoaded", () => {
            // Attach event listeners to "Eliminar" buttons
            const btnEliminarServicio = document.querySelectorAll("button.bg-red-500");
            btnEliminarServicio.forEach((btn) => {
                btn.addEventListener("click", async (event) => {
                    const id = btn.getAttribute("id"); // Retrieve the id attribute
                    if (!id) {
                        alert("No se pudo obtener el ID del servicio.");
                        return;
                    }
                    const confirmar = confirm("¿Estás seguro de que deseas eliminar este servicio?");
                    if (confirmar) {
                        try {
                            const response = await fetch(`/api/eliminar-servicio?id=${encodeURIComponent(id)}`, { method: "DELETE" });
                            if (response.ok) {
                                alert("Servicio eliminado con éxito.");
                                window.location.reload();
                            } else {
                                console.error("Error al eliminar el servicio:", response.statusText);
                                alert("Error al eliminar el servicio.");
                            }
                        } catch (error) {
                            alert("Ocurrió un error al intentar eliminar el servicio.");
                        }
                    }
                });
            });


        });
            
        let currentServiceId = null;

        document.addEventListener("DOMContentLoaded", () => {
        const btnEditarServicio = document.querySelectorAll("button.bg-yellow-500");
        const editModal = document.getElementById("edit-modal");
        const editForm = document.getElementById("edit-service-form") as HTMLFormElement;
        const editNombre = document.getElementById("edit-nombre") as HTMLInputElement;
        const editDescripcion = document.getElementById("edit-descripcion") as HTMLTextAreaElement;
        const editPrecioBase = document.getElementById("edit-precioBase") as HTMLInputElement;
        const editImagen = document.getElementById("edit-imagen") as HTMLInputElement;
        const editPreview = document.getElementById("edit-preview") as HTMLImageElement;
        const cancelEdit = document.getElementById("cancel-edit");
        const editImagenActual = document.getElementById("edit-imagen-actual") as HTMLInputElement;
        
        
        // Cuando se hace clic en "Editar"
        btnEditarServicio.forEach((btn) => {
            btn.addEventListener("click", () => {
            const id = btn.getAttribute("id");
            if (!id) {
                alert("No se pudo obtener el ID del servicio.");
                return;
            }

            currentServiceId = id;

            const nombre = btn.getAttribute("data-nombre") || "";
            const descripcion = btn.getAttribute("data-descripcion") || "";
            const precio = btn.getAttribute("data-precio") || "0";
            const imagen = btn.getAttribute("data-imagen") || "";

            editNombre.value = nombre;
            editDescripcion.value = descripcion;
            editPrecioBase.value = precio;

            if (imagen) {
                editPreview.src = imagen;
                editPreview.classList.remove("hidden");
            } else {
                editPreview.classList.add("hidden");
            }

            editImagenActual.value = imagen;

            editModal.classList.remove("hidden");
            editModal.classList.add("flex");
            });
        });

        cancelEdit.addEventListener("click", () => {
            editModal.classList.add("hidden");
            editModal.classList.remove("flex");
            currentServiceId = null;
            editForm.reset();
            editPreview.classList.add("hidden");
        });

        // Vista previa de imagen al seleccionar una nueva
        editImagen.addEventListener("change", () => {
            const file = editImagen.files?.[0];
            if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                editPreview.src = e.target?.result as string;
                editPreview.classList.remove("hidden");
            };
            reader.readAsDataURL(file);
            }
        });

        // Enviar cambios al backend con FormData (incluyendo imagen)
        editForm.addEventListener("submit", async (event) => {
            event.preventDefault();

            if (!currentServiceId) {
            alert("No hay servicio seleccionado para editar.");
            return;
            }


            const formData = new FormData(editForm);
            formData.append("id", currentServiceId);

            try {
            const response = await fetch(`/api/editar-servicio`, {
                method: "PUT", // O PUT si tu backend lo requiere
                body: formData,
            });

            if (response.ok) {
                alert("Servicio actualizado con éxito.");
                window.location.reload();
            } else {
                const msg = await response.text();
                alert("Error al actualizar el servicio: " + msg);
            }
            } catch (error) {
            console.error(error);
            alert("Ocurrió un error al intentar actualizar el servicio.");
            }
        });
        });

    </script>

</Layout>